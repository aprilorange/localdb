{"name":"Localdb","tagline":"Better localStorage","body":"# LocalDB\r\n\r\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\r\n[![NPM](https://nodei.co/npm/localdb.png)](https://nodei.co/npm/localdb/)\r\n\r\n## Example\r\n\r\n```javascript\r\nimport localdb from 'localdb'\r\nconst Notes = new localdb('notes', 'Array', true)\r\n\r\n// insert some collections and return the collections\r\nlet notes = Notes\r\n  .add({title: 'Today is a big day', category: 'diary'})\r\n  .add({title: 'I met my ex today', category: 'diary'})\r\n  .add({title: 'Levandowski is amazing!', category: 'football'})\r\n  .get()\r\n\r\n// remove all post categoried in football\r\nNotes.remove('category', 'football')\r\n\r\n// find posts and update\r\nconst query = {title: 'diary'}\r\nconst opts = {limit: 2, sort: 1, sortBy: 'title', skip: 0}\r\nNotes.find(query, opts).forEach(note => {\r\n  note.author = 'egoist'\r\n  Notes.save(note)\r\n})\r\n\r\n// override the whole database and generate meta\r\nNotes.override({title: 'New post'}, true)\r\n\r\n// populate another class, eg: your Post have a Author field\r\nconst Post = new localdb('Post', 'Array')\r\nconst User = new localdb('User', 'Array')\r\n\r\n// you should have the Author's objectId to create an instance of that class\r\nconst author = User.extend('some_object_id')\r\n\r\nPost.add({\r\n  title: 'mt post title',\r\n  author: author\r\n})\r\n\r\n// then you can populate that field before .find or .findOne\r\nPost.populate('author').findOne()\r\n\r\n// create an Object database and set some property\r\nconst Site = new localdb('site', 'Object')\r\nSite.set('sitename', 'Google')\r\n\r\n// get sitename\r\nconst sitename = Site.get('sitename')\r\n\r\n// destroy some database\r\nSite.destroy()\r\n```\r\n\r\n## API\r\n\r\n### new localdb(name:String, type = 'Array', timestamp = false)\r\n### new localdb(opts:Object)\r\n\r\n创建一个新的数据库，可选类型为 `Array`,`Object`，并赋值给变量 `db`\r\n\r\n### db.add(obj:Object)\r\n\r\n当类型为 `Array` 时可用，在数据库中增加一条集合\r\n\r\n### db.get(where)\r\n\r\n`where` 为 `null` 时,返回数据库中的内容，返回类型为 `null` 或 `Object` 或 `Array`\r\n\r\n`where` 的类型为 `string` 或者 `number` 时返回对应的 `Object[key]` 或者 `Array[index]`\r\n\r\n### db.findOne(query:Object)\r\n\r\n查询并返回符合条件的一个集合\r\n\r\n### db.find(query:Object, opts:Object)\r\n\r\n查询并返回数个集合\r\n\r\n```javascript\r\nvar opts = { limit: 0, sortBy: 'index', sort: 1, skip: 0 }\r\n```\r\n\r\n### db.save(obj:Oject)\r\n\r\n当类型为 `Array` 时可用，obj 为 `.findOne` 或 `.find` 返回的结果，类型为 `Object`，你可以作出更改之后用 `.update` 更新到数据库\r\n\r\n### db.set(key:String, value)\r\n\r\n当类型为 `Object` 时可用，更新此数据库的一个键值对，没有则新建\r\n\r\n### db.remove(key:String, value)\r\n\r\n当类型为 `Array` 按键值对删除对应的集合\r\n当类型为 `Object` 时直接删除该 key\r\n\r\n### db.extend(objectId)\r\n\r\n创建一个该数据库的 `Pointer` 用于 `populate`\r\n\r\n### db.populate(field)\r\n\r\n在 `.find` 或 `.findOne` 时获取该 `field` 指向的 `collection`\r\n\r\n### db.override(colleciton, reinit = false)\r\n\r\n用 `collection` 整个覆盖旧的数据库\r\n\r\n`reinit` 为 `true` 将自动按照 `opts` 配置为每个 `Object` 生成 `_id` `createdAt` `updatedAt`\r\n\r\n### db.destroy()\r\n\r\n销毁数据库\r\n\r\n## License\r\n\r\nMIT.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}