{"version":3,"sources":["localdb.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","arrayEachTrue","array","objectId","timestamp","Date","getTime","toString","replace","Math","random","toLowerCase","defaultOpts","limit","sortBy","sort","skip","definition","W","LS","LocalDB","name","type","arguments","undefined","this","db","opts","value","JSON","parse","getItem","query","find","console","error","collection","get","filter","obj","has","push","a","b","index","_id","createdAt","updatedAt","override","setItem","stringify","removeItem","context","module","exports","window","localStorage"],"mappings":"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","file":"localdb.min.js","sourcesContent":["/*\n * localdb\n * (c) 2015\n * github.com/aprilorange/localdb\n */\n\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n\n  var defaultOpts = { limit: 0, sortBy: 'index', sort: 1, skip: 0 };\n\n  var definition = function definition(W, LS) {\n    var LocalDB = (function () {\n      function LocalDB(name) {\n        var type = arguments.length <= 1 || arguments[1] === undefined ? 'Array' : arguments[1];\n        var timestamp = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n        _classCallCheck(this, LocalDB);\n\n        if (typeof name === 'string') {\n          this.db = name;\n          this.type = type;\n          this.timestamp = timestamp;\n        } else if (typeof name === 'object') {\n          var opts = name;\n          this.db = opts.name;\n          this.type = opts.type || 'Array';\n          this.timestamp = opts.timestamp || false;\n        }\n      }\n\n      _createClass(LocalDB, [{\n        key: 'get',\n        value: function get() {\n          return JSON.parse(LS.getItem(this.db));\n        }\n      }, {\n        key: 'findOne',\n        value: function findOne(query) {\n          return this.find(query, {\n            limit: 1\n          });\n        }\n      }, {\n        key: 'find',\n        value: function find(query) {\n          var opts = arguments.length <= 1 || arguments[1] === undefined ? defaultOpts : arguments[1];\n\n          if (this.type !== 'Array') {\n            return console.error('The .findOne method only works if the database is an Array!');\n          }\n\n          opts.limit = opts.limit || defaultOpts.limit;\n          opts.sortBy = opts.sortBy || defaultOpts.sortBy;\n          opts.sort = opts.sort || defaultOpts.sort;\n          opts.skip = opts.skip || defaultOpts.skip;\n\n          var collection = this.get() || [];\n          if (query) {\n            collection = collection.filter(function (obj) {\n              var has = [];\n              for (var key in query) {\n                has.push(obj[key] === query[key]);\n              }\n              if (arrayEachTrue(has)) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n          }\n          if (opts.limit === 1) {\n            return collection[0];\n          } else {\n            collection = collection.sort(function (a, b) {\n              if (a[opts.sortBy] < b[opts.sortBy]) {\n                return -opts.sort;\n              } else if (a[opts.sortBy] > b[opts.sortBy]) {\n                return opts.sort;\n              } else {\n                return 0;\n              }\n            });\n            return collection;\n          }\n        }\n      }, {\n        key: 'add',\n        value: function add(obj) {\n          if (this.type !== 'Array') {\n            console.error('The .add method only works if the database is an Array!');\n          }\n          var collection = this.get() || [];\n          var index = 0;\n          if (collection.length > 0) {\n            index = collection.length;\n          }\n          obj.index = index;\n          obj._id = objectId();\n          if (this.timestamp) {\n            obj.createdAt = new Date();\n            obj.updatedAt = new Date();\n          }\n          collection.push(obj);\n          this.override(collection);\n          return this;\n        }\n      }, {\n        key: 'set',\n        value: function set(key, value) {\n          // works if db is object\n          if (this.type !== 'Object') {\n            console.error('The .set method only works if the database is an Object!');\n          } else {\n            var collection = this.get() || {};\n            collection[key] = value;\n            this.override(collection);\n          }\n          return this;\n        }\n      }, {\n        key: 'save',\n        value: function save(obj) {\n          if (this.type !== 'Array') {\n            console.error('The .save method only works if the database is an Array!');\n          }\n          var collection = this.get();\n          if (collection[obj.index]._id === obj._id) {\n            collection[obj.index] = obj;\n            this.override(collection);\n          }\n          return this;\n        }\n      }, {\n        key: 'override',\n        value: function override(collection) {\n          LS.setItem(this.db, JSON.stringify(collection));\n        }\n      }, {\n        key: 'remove',\n        value: function remove(key, value) {\n          var collection = this.get();\n\n          if (this.type === 'Array') {\n            if (collection.length === 0) {\n              return this;\n            }\n            collection = collection.filter(function (obj) {\n              if (obj[key] === value) {\n                return false;\n              } else {\n                return true;\n              }\n            });\n          } else if (this.type === 'Object') {\n            delete collection[key];\n          }\n\n          LS.setItem(this.db, JSON.stringify(collection));\n          return this;\n        }\n      }, {\n        key: 'destroy',\n        value: function destroy() {\n          LS.removeItem(this.db);\n          return this;\n        }\n      }]);\n\n      return LocalDB;\n    })();\n\n    return LocalDB;\n  };\n\n  function arrayEachTrue(array) {\n    for (var i = 0; i < array.length; i++) {\n      if (!array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function objectId() {\n    var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\n    return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\n      return (Math.random() * 16 | 0).toString(16);\n    }).toLowerCase();\n  }\n\n  ;(function (context, name, definition) {\n    if (typeof module !== 'undefined') {\n      module.exports = definition;\n    } else if (typeof context !== 'undefined') {\n      context[name] = definition;\n    }\n  })(window, 'localdb', definition(window, window.localStorage));\n})();"],"sourceRoot":"/source/"}